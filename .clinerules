## Core Rules

You have two modes of operation:

1. Plan mode - You will work with the user to define a plan, you will gather all the information you need to make the changes but will not make any changes
2. Act mode - You will make changes to the codebase based on the plan

- You start in plan mode and will not move to act mode until the plan is approved by the user.
- You will print `# Mode: PLAN` when in plan mode and `# Mode: ACT` when in act mode at the beginning of each response.
- Unless the user explicity asks you to move to act mode, by typing `ACT` you will stay in plan mode.
- You will move back to plan mode after every response and when the user types `PLAN`.
- If the user asks you to take an action while in plan mode you will remind them that you are in plan mode and that they need to approve the plan first.
- When in plan mode always output the full updated plan in every response.

# ロール定義
あなたの名前はclineです。
あなたはreactとnext.jsの専門家です。

# 技術スタック
- React
- Vite
- React Router Dom
- TypeScript
- Supabase
- Tailwind CSS

# プロジェクトの構成
- プロジェクトはVite+Reactで構築されています。
- プロジェクトはTypeScriptで書かれています。
- ルーティングにはReact Router Domを使用しています。
- 大きなコンポーネントは適切に分割し、保守性と再利用性を高めています：
  - 状態管理はZustandを使用し、コンポーネントから分離しています。
  - UIコンポーネントは機能ごとに小さなコンポーネントに分割しています。
  - 例: DeviceDetail.tsxは、DeviceDetailElemHead.tsx、DeviceDetailImage.tsxなど複数の小コンポーネントに分割されています。
- ユーザープラン制限機能を実装しています：
  - user_plansテーブルでユーザーごとのプラン情報を管理
  - 無料プランでは電池グループとデバイスをそれぞれ5つまでに制限
  - 将来的なマネタイズのための基盤として実装

# コード構造
- データフェッチングと状態管理の責任を明確に分離しています：
  - `query.ts` - React Queryを使ったデータフェッチングを担当
  - `store.ts` - Zustandを使った状態管理を担当
  - `hooks.ts` - UIロジックと後方互換性を提供
- データフローは以下の流れに従います：
  1. `query.ts` - APIからデータをフェッチ
  2. `store.ts` - フェッチしたデータをZustandストアに保存
  3. コンポーネント - `hooks.ts`経由でデータにアクセス
- 命名規則を統一しています：
  - データフェッチング: `use〇〇Query`
  - Zustandストア: `use〇〇Store`
  - 後方互換性: `use〇〇`（内部的にはStoreを使用）

# UI設計の原則
- レスポンシブデザインを採用し、様々な画面サイズに対応します。
  - スマートフォン（縦表示）のような狭い画面でも適切に表示されるよう配慮します。
  - Tailwind CSSのブレークポイントを活用し、画面サイズに応じたレイアウト変更を行います。
    - 基本的に`sm:`（640px以上）を境界として、レイアウトを切り替えます。
    - 小さい画面では縦並び（`flex-col`）、大きい画面では横並び（`sm:flex-row`）を基本とします。
  - 長いテキストは`truncate`クラスを使用して省略表示し、レイアウト崩れを防止します。
  - 要素の配置には`flex`レイアウトを基本とし、適切な余白（margin, padding）を設定します。
  - 入力フィールドは`w-full`などを使用して、利用可能な幅いっぱいに表示します。
  - ボタンやアイコンには`flex-shrink-0`を適用し、縮小されないようにします。
  - 状態を示すバッジの色分けは以下の原則に従います：
    - 赤色: 警告・エラー・期限超過などの緊急性の高い状態
    - 黄色: 注意・まもなく期限などの注意が必要な状態
    - 青色: 通常・問題なしなどの標準的な状態
    - 緑色: 完了・充電済みなどの良好な状態

# プロジェクトの概要
プロジェクトの概要はREADME.mdに記載されています。

# プロジェクトの構成

# 実装および動作確認における注意点
 - バグの修正はあなたが動作確認して、解消したことを確認します。修正ができたら、その旨を通知してください。
   - あなたが調査・修正を繰り返しても問題が解消しない場合は、一度作業を止めて報告してください。修正方法を一緒に検討しましょう。
 - 仕様変更は、指示している人（cline以外）が確認します。修正ができたら、動作確認方法を提示してください。
 - 他の人にも見やすいコードを書くために、以下のようなコード作成を心がけてください。
   - インデントを揃える
   - 変数名を分かりやすくする
   - 変数名のルールを統一する
   - コメントを入れる
   - 適切な範囲でのライブラリへの分割を行う
   - 同じようなコードはライブラリ化・関数化・クラス化など適切な方法を使用して共通化する
   - 設定値・リテラルは定数化し、各ファイルの上部に置く
 - 他の人にもわかりやすいプロジェクトであるために、以下のことを心がけてください
   - 使い方、機能、目的をREADMEに記載する
   - 実行方法・大きな仕様変更があった場合はREADMEを確認し、必要ならば更新する
 - gitでのバージョン管理を行う
   - 作業内容は都度コミットする
   - 大きな変更を行う前に、ブランチを切る
   - gitのバージョン管理は他の人が途中変更している可能性があるため、 `git status` `git diff` `git log` `git branch` 等で状況を確認しながらする
   - 適切な.gitignoreを設定する
 - このプロジェクトでは自動テストやコーディングルールの統一は必要ありません。そこに手間や時間をかけないよう注意してください。

# アプリ公開における注意点
 - 完成したアプリはgithub上で公開します。githubでの公開に必要なことを考慮して実装してください。
 - 他の人が見ても問題ないように、コード内に個人情報や機密情報を記載しないようにしてください。
 - gitのremoteに関する設定変更および `git push` は、はっきりとした指示がない限りは行わないでください。
